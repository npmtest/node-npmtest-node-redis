{"/home/travis/build/npmtest/node-npmtest-node-redis/test.js":"/* istanbul instrument in package npmtest_node_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-redis/lib.npmtest_node_redis.js":"/* istanbul instrument in package npmtest_node_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_redis = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_redis = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-redis/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-redis && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_redis */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_redis\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_redis.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_redis.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_redis.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_redis.__dirname +\n                    '/lib.npmtest_node_redis.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-redis/node_modules/node-redis/index.js":"// The MIT License\n//\n// Copyright (c) 2013 Tim Smart\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar net    = require('net'),\n    utils  = require('./utils'),\n    Parser = require('./parser');\n\nvar RedisClient = function RedisClient(port, host, auth) {\n  this.host           = host;\n  this.port           = port;\n  this.auth           = auth;\n  this.stream         = net.createConnection(port, host);\n  this.connected      = false;\n  // Pub/sub monitor etc.\n  this.blocking       = false;\n  // Command queue.\n  this.max_size       = 1300;\n  this.command        = '';\n  this.commands       = new utils.Queue();\n  // For the retry timer.\n  this.retry          = false;\n  this.retry_attempts = 0;\n  this.retry_delay    = 250;\n  this.retry_backoff  = 1.7;\n  // If we want to quit.\n  this.quitting       = false;\n  // For when we have a full send buffer.\n  this.paused         = false;\n  this.send_buffer    = [];\n  this.flushing       = false;\n  // channels / patterns for disconnects\n  this.pubsub         = { pattern : {}, channel : {} }\n\n  var self = this;\n\n  this.stream.on(\"connect\", function () {\n    // Reset the retry backoff.\n    self.retry          = false;\n    self.retry_delay    = 250;\n    self.retry_attempts = 0;\n    self.stream.setNoDelay();\n    self.stream.setTimeout(0);\n    self.connected      = true;\n\n    // Resend commands if we need to.\n    var command,\n        commands = self.commands.array.slice(self.commands.offset);\n\n    // Send auth.\n    if (self.auth) {\n      commands.unshift(['AUTH', [self.auth], null]);\n    }\n\n    self.commands = new utils.Queue();\n\n    for (var i = 0, il = commands.length; i < il; i++) {\n      command = commands[i];\n      self.sendCommand(command[0], command[1], command[2]);\n    }\n\n    // pubsub?\n    var patterns = Object.keys(self.pubsub.pattern)\n    var channels = Object.keys(self.pubsub.channel)\n\n    for (var i = 0, il = patterns.length; i < il; i++) {\n      self.psubscribe(patterns[i])\n    }\n    for (var i = 0, il = channels.length; i < il; i++) {\n      self.subscribe(channels[i])\n    }\n\n    // give connect listeners a chance to run first in case they need to auth\n    self.emit(\"connect\");\n  });\n\n  this.stream.on(\"data\", function (buffer) {\n    try {\n      self.parser.onIncoming(buffer);\n    } catch (err) {\n      self.emit(\"error\", err);\n      // Reset state.\n      self.parser.resetState();\n    }\n  });\n\n  // _write\n  // So we can pipeline requests.\n  this._flush = function () {\n    if ('' !== self.command) {\n      self.send_buffer.push(self.command);\n      self.command = '';\n    }\n\n    for (var i = 0, il = self.send_buffer.length; i < il; i++) {\n      if (!self.stream.writable || false === self.stream.write(self.send_buffer[i])) {\n        return self.send_buffer = self.send_buffer.slice(i + 1);\n      }\n    }\n\n    self.send_buffer.length = 0;\n    self.paused = self.flushing = false;\n  };\n\n  // When we can write more.\n  this.stream.on('drain', this._flush);\n\n  this.stream.on(\"error\", function (error) {\n    if ('ECONNREFUSED' === error.code) self.onDisconnect()\n    self.emit(\"error\", error);\n  });\n\n  var onClose = function onClose () {\n    // Ignore if we are already retrying. Or we want to quit.\n    if (self.retry) return;\n    self.emit('end');\n    self.emit('close');\n    if (self.quitting) {\n      for (var i = 0, il = self.commands.length; i < il; i++) {\n        self.parser.emit('reply');\n      }\n      return;\n    }\n\n    self.onDisconnect();\n  };\n\n  this.stream.on(\"end\", onClose);\n  this.stream.on(\"close\", onClose);\n\n  // Setup the parser.\n  this.parser = new Parser();\n\n  this.parser.on('reply', function onReply (reply) {\n    if (false !== self.blocking) {\n      if ('pubsub' === self.blocking) {\n        var type = reply[0].toString();\n\n        switch (type) {\n        case 'psubscribe':\n        case 'punsubscribe':\n        case 'subscribe':\n        case 'unsubscribe':\n          var channel = reply[1].toString(),\n              count   = reply[2];\n\n          if (0 === count) {\n            self.blocking = false;\n\n            if ('punsubscribe' === type) {\n              delete self.pubsub.pattern[channel]\n            } else if ('unsubscribe' === type) {\n              delete self.pubsub.channel[channel]\n            }\n          }\n\n          if ('psubscribe' === type) {\n            self.pubsub.pattern[channel] = true\n          } else if ('subscribe' === type) {\n            self.pubsub.channel[channel] = true\n          }\n\n          self.emit(type, channel, count);\n          self.emit(type + ':' + channel, count);\n          break;\n        case 'message':\n          var key  = reply[1].toString(),\n              data = reply[2];\n          self.emit('message', key, data);\n          self.emit('message:' + key, data);\n          break;\n        case 'pmessage':\n          var pattern = reply[1].toString(),\n              key     = reply[2].toString(),\n              data    = reply[3];\n          self.emit('pmessage', pattern, key, data);\n          self.emit('pmessage:' + pattern, key, data);\n          break;\n        }\n      } else {\n        self.emit('data', reply);\n      }\n      return;\n    }\n\n    var command = self.commands.shift();\n    if (command) {\n      switch (command[0]) {\n      case 'MONITOR':\n        self.blocking = true;\n        break;\n      case 'SUBSCRIBE':\n      case 'PSUBSCRIBE':\n        self.blocking = 'pubsub';\n        onReply(reply);\n        return;\n      }\n\n      if (command[2]) {\n        command[2](null, reply);\n      }\n    }\n  });\n\n  // DB error\n  this.parser.on('error', function (error) {\n    var command = self.commands.shift();\n    error = new Error(error);\n    if (command && command[2]) command[2](error);\n    else self.emit('error', error);\n  });\n\n  process.EventEmitter.call(this);\n};\n\nRedisClient.prototype = Object.create(process.EventEmitter.prototype);\n\n// Exports\nexports.RedisClient = RedisClient;\n\n// createClient\nexports.createClient = function createClient (port, host, auth) {\n  return new RedisClient(port || 6379, host, auth);\n};\n\nRedisClient.prototype.connect = function () {\n  return this.stream.connect();\n};\n\nRedisClient.prototype.onDisconnect = function (error) {\n  var self = this;\n\n  // Make sure the stream is reset.\n  this.connected = false;\n  this.stream.destroy();\n  this.parser.resetState();\n\n  // Increment the attempts, so we know what to set the timeout to.\n  this.retry_attempts++;\n\n  // Set the retry timer.\n  setTimeout(function () {\n    self.stream.connect(self.port, self.host);\n  }, this.retry_delay);\n\n  this.retry_delay *= this.retry_backoff;\n  this.retry        = true;\n};\n\nRedisClient.prototype._write = function (data) {\n  if (!this.paused) {\n    if (false === this.stream.write(data)) {\n      this.paused = true;\n    }\n  } else {\n    this.send_buffer.push(data);\n  }\n};\n\n// We use this so we can watch for a full send buffer.\nRedisClient.prototype.write = function write (data, buffer) {\n  if (true !== buffer) {\n    this.command += data;\n    if (this.max_size <= this.command.length) {\n      this._write(this.command);\n      this.command = '';\n    }\n  } else {\n    if ('' !== this.command) {\n      this._write(this.command);\n      this.command = '';\n    }\n    this._write(data);\n  }\n\n  if (!this.flushing) {\n    process.nextTick(this._flush);\n    this.flushing = true;\n  }\n};\n\n// We make some assumptions:\n//\n// * command WILL be uppercase and valid.\n// * args IS an array\nRedisClient.prototype.sendCommand = function (command, args, callback) {\n  // Push the command to the stack.\n  if (false === this.blocking) {\n    this.commands.push([command, args, callback]);\n  }\n\n  // Writable?\n  if (false === this.connected) return;\n\n  // Do we have to send a multi bulk command?\n  // Assume it is a valid command for speed reasons.\n  var args_length;\n\n  if (args && 0 < (args_length = args.length)) {\n    var arg, arg_type, last,\n        previous = ['*', (args_length + 1), '\\r\\n', '$', command.length, '\\r\\n', command, '\\r\\n'];\n\n    for (i = 0, il = args_length; i < il; i++) {\n      arg      = args[i];\n      arg_type = typeof arg;\n\n      if ('string' === arg_type) {\n        // We can send this in one go.\n        previous.push('$', Buffer.byteLength(arg), '\\r\\n', arg, '\\r\\n');\n      } else if ('number' === arg_type) {\n        // We can send this in one go.\n        previous.push('$', ('' + arg).length, '\\r\\n', arg, '\\r\\n');\n      } else if (null === arg || 'undefined' === arg_type) {\n        // Send NIL\n        previous.push('$\\r\\b\\r\\b')\n        this.write(previous.join(''));\n        previous = [];\n      } else {\n        // Assume we are a buffer.\n        previous.push('$', arg.length, '\\r\\n');\n        this.write(previous.join(''));\n        this.write(arg, true);\n        previous  = ['\\r\\n'];\n      }\n    }\n\n    // Anything left?\n    this.write(previous.join(''));\n  } else {\n    // We are just sending a stand alone command.\n    this.write(command_buffers[command]);\n  }\n};\n\nRedisClient.prototype.destroy = function () {\n  this.quitting = true;\n  return this.stream.destroy();\n};\n\n// http://redis.io/commands.json\nexports.commands = [\n  'APPEND', 'AUTH', 'BGREWRITEAOF', 'BGSAVE', 'BLPOP', 'BRPOP', 'BRPOPLPUSH', 'CONFIG GET',\n  'CONFIG SET', 'CONFIG RESETSTAT', 'DBSIZE', 'DEBUG OBJECT', 'DEBUG SEGFAULT', 'DECR',\n  'DECRBY', 'DEL', 'DISCARD', 'ECHO', 'EXEC', 'EXISTS', 'EXPIRE', 'EXPIREAT', 'FLUSHALL',\n  'FLUSHDB', 'GET', 'GETBIT', 'GETRANGE', 'GETSET', 'HDEL', 'HEXISTS', 'HGET', 'HGETALL',\n  'HINCRBY', 'HKEYS', 'HLEN', 'HMGET', 'HMSET', 'HSET', 'HSETNX', 'HVALS', 'INCR', 'INCRBY',\n  'INFO', 'KEYS', 'LASTSAVE', 'LINDEX', 'LINSERT', 'LLEN', 'LPOP', 'LPUSH', 'LPUSHX', 'LRANGE',\n  'LREM', 'LSET', 'LTRIM', 'MGET', 'MONITOR', 'MOVE', 'MSET', 'MSETNX', 'MULTI', 'PERSIST',\n  'PING', 'PSUBSCRIBE', 'PUBLISH', 'PUNSUBSCRIBE', 'QUIT', 'RANDOMKEY', 'RENAME', 'RENAMENX',\n  'RPOP', 'RPOPLPUSH', 'RPUSH', 'RPUSHX', 'SADD', 'SAVE', 'SCARD', 'SDIFF', 'SDIFFSTORE', 'SELECT',\n  'SET', 'SETBIT', 'SETEX', 'SETNX', 'SETRANGE', 'SHUTDOWN', 'SINTER', 'SINTERSTORE', 'SISMEMBER',\n  'SLAVEOF', 'SMEMBERS', 'SMOVE', 'SORT', 'SPOP', 'SRANDMEMBER', 'SREM', 'STRLEN', 'SUBSCRIBE',\n  'SUNION', 'SUNIONSTORE', 'SYNC', 'TTL', 'TYPE', 'UNSUBSCRIBE', 'UNWATCH', 'WATCH', 'ZADD',\n  'ZCARD', 'ZCOUNT', 'ZINCRBY', 'ZINTERSTORE', 'ZRANGE', 'ZRANGEBYSCORE', 'ZRANK', 'ZREM',\n  'ZREMRANGEBYRANK', 'ZREMRANGEBYSCORE', 'ZREVRANGE', 'ZREVRANGEBYSCORE', 'ZREVRANK', 'ZSCORE',\n  'ZUNIONSTORE'\n];\n\nthis.blocking_commands = [\"MONITOR\"];\n\n// For each command, make a buffer for it.\nvar command_buffers = {};\n\nexports.commands.forEach(function (command) {\n  // Pre-alloc buffers for non-multi commands.\n  //command_buffers[command] = new Buffer('*1\\r\\n$' + command.length + '\\r\\n' + command + '\\r\\n');\n  command_buffers[command] = '*1\\r\\n$' + command.length + '\\r\\n' + command + '\\r\\n';\n\n  // Don't override stuff.\n  if (!RedisClient.prototype[command.toLowerCase()]) {\n    RedisClient.prototype[command.toLowerCase()] = function (array, callback) {\n      // An array of args.\n      // Assume we only have two args.\n      if (Array.isArray(array)) {\n        return this.sendCommand(command, array, callback);\n      }\n\n      // Arbitary amount of arguments.\n      var args    = [];\n      args.push.apply(args, arguments);\n      callback    = 'function' === typeof args[args.length - 1];\n\n      if (callback) {\n        callback  = args.pop();\n      } else {\n        callback  = null;\n      }\n\n      this.sendCommand(command, args, callback);\n    };\n  }\n});\n\n// Overwrite quit\nRedisClient.prototype.quit = RedisClient.prototype.end =\nfunction (callback) {\n  this.quitting = true;\n  return this.sendCommand('QUIT', null, callback);\n};\n\n","/home/travis/build/npmtest/node-npmtest-node-redis/node_modules/node-redis/utils.js":"// The MIT License\n//\n// Copyright (c) 2013 Tim Smart\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// noop to keep references low.\nexports.noop = function () {};\n\n// Logger function.\nexports.log = function log (error, results) {\n  if (error) return console.error(error);\n\n  var ret;\n\n  if (results instanceof Array) {\n    var result;\n    ret = [];\n\n    for (var i = 0, il = results.length; i < il; i++) {\n      result = results[i];\n\n      if (result instanceof Buffer) {\n        ret.push(result.toString());\n      } else {\n        ret.push(result);\n      }\n    }\n  } else if (results instanceof Buffer) {\n    ret = results.toString();\n  } else ret = results;\n\n  console.log(ret);\n};\n\n// Fast copyBuffer method for small buffers.\nexports.copyBuffer = function copyBuffer (source, target, start, s_start, s_end) {\n  s_end || (s_end = source.length);\n\n  for (var i = s_start; i < s_end; i++) {\n    target[i - s_start + start] = source[i];\n  }\n\n  return target;\n};\n\n// Fast write buffer for small uns.\nvar writeBuffer = exports.writeBuffer = function writeBuffer (buffer, string, offset) {\n  for (var i = 0, il = string.length; i < il; i++) {\n    buffer[i + offset] = string.charCodeAt(i);\n  }\n\n  return il;\n};\n\nvar toArray = exports.toArray = function toArray (args) {\n  var len = args.length,\n      arr = new Array(len), i;\n\n  for (i = 0; i < len; i++) {\n    arr[i] = args[i];\n  }\n\n  return arr;\n};\n\n// Queue class adapted from Tim Caswell's pattern library\n// http://github.com/creationix/pattern/blob/master/lib/pattern/queue.js\nvar Queue = function () {\n  this.array = Array.prototype.slice.call(arguments);\n  this.offset = 0;\n};\n\nexports.Queue = Queue;\n\nQueue.prototype.shift = function () {\n  if (this.array.length === 0) return;\n  var ret = this.array[this.offset];\n  this.array[this.offset++] = undefined;\n  if (this.offset === this.array.length) {\n    this.array.length = 0;\n    this.offset       = 0;\n  }\n  return ret;\n}\n\nQueue.prototype.push = function (item) {\n  return this.array.push(item);\n};\n\nObject.defineProperty(Queue.prototype, 'length', {\n  get: function () {\n    return this.array.length;\n  }\n});\n;\n","/home/travis/build/npmtest/node-npmtest-node-redis/node_modules/node-redis/parser.js":"// The MIT License\n//\n// Copyright (c) 2013 Tim Smart\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software, and\n// to permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar utils = require('./utils');\n\nvar RedisParser = function RedisParser () {\n  this.resetState();\n\n  process.EventEmitter.call(this);\n\n  return this;\n};\n\nmodule.exports = RedisParser;\n\nRedisParser.prototype = Object.create(process.EventEmitter.prototype);\n\n// Reset state, no matter where we are at.\nRedisParser.prototype.resetState = function resetState () {\n  this.reply     = null;\n  this.expected  = null;\n  this.multi     = null;\n  this.replies   = null;\n  this.pos       = null;\n  this.flag      = 'TYPE';\n  this.data      = null;\n  this.last_data = null;\n  this.remaining = null;\n};\n\n// Handle an incoming buffer.\nRedisParser.prototype.onIncoming = function onIncoming (buffer) {\n  var char_code,\n      pos    = this.pos || 0,\n      length = buffer.length;\n\n  // Make sure the buffer is joint properly.\n  if ('TYPE' !== this.flag && 'BULK' !== this.flag && null !== this.data) {\n    // We need to wind back a step.\n    // If we have CR now, it would break the parser.\n    if (0 !== this.data.length) {\n      char_code = this.data.charCodeAt(this.data.length - 1);\n      this.data = this.data.slice(0, -1);\n      --pos;\n    } else {\n      char_code = buffer[pos];\n    }\n  }\n\n  for (; length > pos;) {\n    switch (this.flag) {\n    case 'TYPE':\n      // What are we doing next?\n      switch (buffer[pos++]) {\n      // Single line status reply.\n      case 43: // + SINGLE\n        this.flag = 'SINGLE';\n        break;\n\n      // Tells us the length of upcoming data.\n      case 36: // $ LENGTH\n        this.flag = 'BULK_LENGTH';\n        break;\n\n      // Tells us how many args are coming up.\n      case 42: // * MULTI\n        this.flag = 'MULTI_BULK';\n        break;\n\n      case 58: // : INTEGER\n        this.flag = 'INTEGER';\n        break;\n\n      // Errors\n      case 45: // - ERROR\n        this.flag = 'ERROR';\n        break;\n      }\n      // Fast forward a char.\n      char_code = buffer[pos];\n      this.data = '';\n      break;\n\n    // Single line status replies.\n    case 'SINGLE':\n    case 'ERROR':\n      // Add char to the data\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Optimize for the common use case.\n      if ('O' === this.data && 75 === buffer[pos]) { // OK\n        // Send off the reply.\n        this.data = 'OK';\n        this.onData();\n\n        pos += 3; // Skip the `K\\r\\n`\n\n        // break early.\n        break;\n      }\n\n      // Otherwise check for CR\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Send the reply.\n        if ('SINGLE' === this.flag) {\n          this.onData();\n        } else {\n          this.onError();\n        }\n\n        // Skip \\r\\n\n        pos += 2;\n      }\n      break;\n\n    // We have a integer coming up. Look for a CR\n    // then assume that is the end.\n    case 'BULK_LENGTH':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.data = +this.data;\n\n        // Null reply?\n        if (-1 !== this.data) {\n          this.flag      = 'BULK';\n          this.last_data = this.data;\n          this.data      = null;\n        } else {\n          this.data = null;\n          this.onData();\n        }\n\n        // Skip the \\r\\n\n        pos += 2;\n      }\n      break;\n\n    // Short bulk reply.\n    case 'BULK':\n      if (null === this.data && length >= (pos + this.last_data)) {\n        // Slow slice is slow.\n        if (14 > this.last_data) {\n          this.data = new Buffer(this.last_data);\n          for (var i = 0; i < this.last_data; i++) {\n            this.data[i] = buffer[i + pos];\n          }\n        } else {\n          this.data = buffer.slice(pos, this.last_data + pos);\n        }\n\n        // Fast forward past data.\n        pos += this.last_data + 2;\n\n        // Send it off.\n        this.onData();\n      } else if (this.data) {\n        // Still joining. pos = amount left to go.\n        if (this.remaining <= length) {\n          // End is within this buffer.\n          if (13 < this.remaining) {\n            buffer.copy(this.data, this.last_data - this.remaining, 0, this.remaining)\n          } else {\n            utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, this.remaining);\n          }\n\n          // Fast forward past data.\n          pos = this.remaining + 2;\n          this.remaining = null;\n\n          this.onData();\n        } else {\n          // We have more to come. Copy what we got then move on,\n          // decrementing the amount we have copied from this.remaining\n          if (13 < (this.remaining - length)) {\n            utils.copyBuffer(buffer, this.data, this.last_data - this.remaining, 0, length);\n          } else {\n            buffer.copy(this.data, this.last_data - this.remaining, 0, length);\n          }\n\n          // More to go.\n          this.remaining -= length;\n          pos             = length;\n        }\n      } else {\n        // We will have to do a join.\n        this.data = new Buffer(this.last_data);\n\n        // Fast copy if small.\n        if (15 > this.last_data) {\n          utils.copyBuffer(buffer, this.data, 0, pos);\n        } else {\n          buffer.copy(this.data, 0, pos)\n        }\n\n        // Point pos to the amount we need.\n        this.remaining = this.last_data - (length - pos);\n        pos            = length;\n      }\n      break;\n\n    // How many bulk's are coming?\n    case 'MULTI_BULK':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.last_data = +this.data;\n        this.data      = null;\n\n        // Are we multi?\n        if (null === this.expected) {\n          this.expected = this.last_data;\n          this.reply    = [];\n        } else if (null === this.multi) {\n          this.multi    = this.expected;\n          this.expected = null;\n          this.replies  = [];\n        }\n\n        // Skip the \\r\\n\n        pos += 2;\n        this.flag = 'TYPE';\n\n        // Zero length replies.\n        if (0 === this.last_data) {\n          this.expected = this.reply = null;\n          this.data     = [];\n          this.onData();\n          break;\n        } else if (-1 === this.last_data) {\n          // NIL reply.\n          this.expected = this.reply = null;\n          this.data     = null;\n          this.onData();\n          break;\n        }\n\n        char_code = buffer[pos];\n\n        // Will have to look ahead to check for another MULTI in case\n        // we are a multi transaction.\n        if (36 === char_code) { // $ - BULK_LENGTH\n          // We are bulk data.\n          this.flag = 'BULK_LENGTH';\n\n          // We are skipping the TYPE check. Skip the $\n          pos++;\n          // We need to set char code and data.\n          char_code = buffer[pos];\n          this.data = '';\n        } else if (null === this.multi && char_code) {\n          // Multi trans time.\n          this.multi    = this.expected;\n          this.expected = null;\n          this.replies  = [];\n        }\n      }\n      break;\n\n    case 'INTEGER':\n      // We are still looking for more digits.\n      // char_code already set by TYPE state.\n      this.data += String.fromCharCode(char_code);\n      pos++;\n\n      // Is the next char the end? Set next char_code while\n      // we are at it.\n      char_code = buffer[pos];\n      if (13 === char_code) { // \\r CR\n        // Cast to int\n        this.data = +this.data;\n        this.onData();\n\n        // Skip the \\r\\n\n        pos += 2;\n      }\n      break;\n    }\n  }\n\n  // In case we have multiple packets.\n  this.pos = pos - length;\n};\n\n// When we have recieved a chunk of response data.\nRedisParser.prototype.onData = function onData () {\n  if (null !== this.expected) {\n    // Decrement the expected data replies and add the data.\n    this.reply.push(this.data);\n    this.expected--;\n\n    // Finished? Send it off.\n    if (0 === this.expected) {\n      if (null !== this.multi) {\n        this.replies.push(this.reply);\n        this.multi--;\n\n        if (0 === this.multi) {\n          this.emit('reply', this.replies);\n          this.replies = this.multi = null;\n        }\n      } else {\n        this.emit('reply', this.reply);\n      }\n      this.reply = this.expected = null;\n    }\n  } else {\n    if (null === this.multi) {\n      this.emit('reply', this.data);\n    } else {\n      this.replies.push(this.data);\n      this.multi--;\n\n      if (0 === this.multi) {\n        this.emit('reply', this.replies);\n        this.replies = this.multi = null;\n      }\n    }\n  }\n\n  this.last_data = null;\n  this.data      = null;\n  this.flag      = 'TYPE';\n};\n\n// Found an error.\nRedisParser.prototype.onError = function onError () {\n  if (null === this.multi) {\n    this.emit('error', this.data);\n  } else {\n    this.replies.push(this.data);\n    this.multi--;\n\n    if (0 === this.multi) {\n      this.emit('reply', this.replies);\n      this.replies = this.multi = null;\n    }\n  }\n\n  this.last_data = null;\n  this.data      = null;\n  this.flag      = 'TYPE';\n};\n"}